/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 6.6.4, Date: 04-Oct-2013.
 */
package tr.gov.tubitak.uekae.esya.asn.ocsp;

import com.objsys.asn1j.runtime.*;
import tr.gov.tubitak.uekae.esya.asn.x509.Name;
import tr.gov.tubitak.uekae.esya.asn.x509.AuthorityInfoAccessSyntax;

public class ServiceLocator extends Asn1Type {

	private static final long serialVersionUID = 55;
	static {
		setKey(_ocspRtkey._rtkey);
	}

   public Name issuer;
   public AuthorityInfoAccessSyntax locator;

   public ServiceLocator () {
      super();
      init();
   }

   /**
    * This constructor sets all elements to references to the 
    * given objects
    */
   public ServiceLocator (
      Name issuer_,
      AuthorityInfoAccessSyntax locator_
   ) {
      super();
      issuer = issuer_;
      locator = locator_;
   }

   public void init () {
      issuer = null;
      locator = null;
   }

   public void decode
      (Asn1BerDecodeBuffer buffer, boolean explicit, int implicitLength)
      throws Asn1Exception, java.io.IOException
   {
      int llen = (explicit) ?
         matchTag (buffer, Asn1Tag.SEQUENCE) : implicitLength;

      init ();

      // decode SEQUENCE

      Asn1BerDecodeContext _context =
         new Asn1BerDecodeContext (buffer, llen);

      IntHolder elemLen = new IntHolder();

      // decode issuer

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         issuer = new Name();
         issuer.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "issuer");

      // decode locator

      if (_context.matchElemTag (Asn1Tag.UNIV, Asn1Tag.CONS, 16, elemLen, false)) {
         locator = new AuthorityInfoAccessSyntax();
         locator.decode (buffer, true, elemLen.value);
      }
      else throw new Asn1MissingRequiredException (buffer, "locator");

      if (!_context.expired()) {
         Asn1Tag _tag = buffer.peekTag ();
         if (_tag.equals (Asn1Tag.UNIV, Asn1Tag.CONS, 16))
            throw new Asn1SeqOrderException ();

      }
   }

   public int encode (Asn1BerEncodeBuffer buffer, boolean explicit)
      throws Asn1Exception
   {
      int _aal = 0, len;

      // encode locator

      if (locator != null) {
         len = locator.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("locator");

      // encode issuer

      if (issuer != null) {
         len = issuer.encode (buffer, true);
         _aal += len;
      }
      else throw new Asn1MissingRequiredException ("issuer");

      if (explicit) {
         _aal += buffer.encodeTagAndLength (Asn1Tag.SEQUENCE, _aal);
      }

      return (_aal);
   }

   public void print (java.io.PrintStream _out, String _varName, int _level)
   {
      indent (_out, _level);
      _out.println (_varName + " {");
      if (issuer != null) issuer.print (_out, "issuer", _level+1);
      if (locator != null) locator.print (_out, "locator", _level+1);
      indent (_out, _level);
      _out.println ("}");
   }
}
